;; -*-lisp-*-

(in-package :stumpwm)

(set-prefix-key (kbd "C-q"))

(defun load-file (file)
  (load (concatenate 'string "/home/jmonetta/.stump/" file ".lisp")))


(run-shell-command "/home/jmonetta/bin/notify.py &")
(run-shell-command "feh --bg-scale /home/jmonetta/Wallpapers/a_simple_plan.png &")
(run-shell-command "xautolock -time 15 -locker 'i3lock --color 000000' &")
(run-shell-command "setxkbmap -layout us -variant altgr-intl -option nodeadkeys")

(load-file "stump-colors-wombat")
(load-file "swank")
(load-file "utils")
(load-file "menus")

(load "/home/jmonetta/MyProjects/stumpish-notify/notify.lisp")
(load-module "cpu")
;;(load-module "disk")
(load-module "mem")
(load-module "multimedia-keys")
;;(load-module "net")


(setf *time-modeline-string* "%a %e ^4*^B%k:%M^b^n %p")

(setf *screen-mode-line-format* (list 
				 "%c" ; cpu
				 "%t "
				 "%M" ; mem
				 "^>"
				 '(:eval (get-services-status-string)) " "
				 "%n"
				 "%d"))

(setq *startup-message* "^1*^BStumpWM^b: not powered by bee-ant AI yet."
      *suppress-frame-indicator* nil
      *mouse-focus-policy* :click)

(set-font "-xos4-terminus-bold-r-normal--14-140-72-72-c-80-iso8859-7")

(dolist (head
          (list (first (screen-heads (current-screen)))) ; first
         ;; (screen-heads (current-screen)) ; all
         )
  (enable-mode-line (current-screen) head
                    t *screen-mode-line-format*))



(gnew "development")

(gnew "browsers")

(gnew "chats")
(load-group-layout "chats")

(gnew "terminals")

(load-desktop-rules "desktop-rules")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Commands and commands-keys
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-key *top-map* (kbd "F12") "notify-chat-quick-answer")

(define-key *top-map* (kbd "s-t") "gselect terminals")

(define-key *top-map* (kbd "s-ESC") "i3lock")

(defvar *x-server-gamma-toggle* nil)

(defcommand toggle-bright () ()
  "Change monitor bright by changing X server gamma, creating for playing openarena"
  (if *x-server-gamma-toggle*
      (progn
	(run-shell-command "xgamma -gamma 1.0")
	(setq *x-server-gamma-toggle* nil))
      (progn
	(run-shell-command "xgamma -gamma 1.7")
	(setq *x-server-gamma-toggle* t))))
      
(defcommand openarena () ()
  "Openarena game"
  (run-shell-command "openarena +set r_fullscreen 0"))

(defcommand ib-vpn-connect () ()
  "Connect to internet brands VPN using net extend client"
  (gnew"Default")
  (run-shell-command "gnome-terminal -e '/home/jmonetta/NonRepSoftware/netExtenderClient/netExtender -u jmonetta -d CARSDIRECT ibhq1vpn.internetbrands.com"))

(defcommand i3lock () ()
  "Lock the screen and ask for password"
  (run-shell-command "i3lock --color 000000"))

(defcommand emacs () ()  ;! redefining emacs command
  "Start Emacs or switch to it, if it is already running."
  (run-or-raise "emacs" '(:class "Emacs")))

(define-key *top-map* (kbd "s-x") "emacs")


(defcommand conkeror () ()
  "Start Conkeror or switch to it, if it is already running."
  (run-or-raise "conkeror" '(:class "Conkeror")))

(define-key *top-map* (kbd "s-f") "firefox")

(defcommand iceweasel () ()
  "Start Firefox or switch to it, if it is already running."
  (run-or-raise "iceweasel" '(:class "Iceweasel")))

(defcommand firefox () ()
  "Start Firefox or switch to it, if it is already running."
  (run-or-raise "firefox" '(:class "Firefox")))

(defcommand google-chrome () ()
  "Start Google-chrome or switch to it, if it is already running."
  (run-or-raise "google-chrome" '(:class "Google-chrome")))

(define-key *top-map* (kbd "s-c") "google-chrome")

(defcommand sql-workbench () ()
  "Start sql-workbench or switch to it, if it is already running."
  (run-or-raise "sqlworkbench" '(:class "workbench-WbStarter")))


(defcommand sql-developer () ()
  "Start sql-developer or switch to it, if it is already running."
  (run-or-raise "sqldeveloper" '(:class "oracle-ide-boot-Launcher")))

(define-key *top-map* (kbd "s-s") "sql-workbench")

(defcommand skype () ()
  "Start skype or switch to it, if it is already running."
  (run-or-raise "skype" '(:class "Skype")))

(defcommand pidgin () ()
  "Start pidgin or switch to it, if it is already running."
  (run-or-raise "pidgin" '(:class "Pidgin" :role "conversation")))

(define-key *top-map* (kbd "s-p") "pidgin")

(define-key *top-map* (kbd "s-T") "new-terminal")


(defcommand delete-window-and-frame () ()
   "Kills the windows and delets the current frame"
   (delete-window)
   (run-commands "remove"))


(defcommand terminal-on-current-screen () ()
  "Start new gnome-terminal on current screen."
  (run-shell-command "gnome-terminal"))

(defcommand icedove () ()
  "Start Icedove or switch to it, if it is already running."
  (run-or-raise "icedove" '(:class "Icedove")))

(define-key *top-map* (kbd "s-d") "icedove")

(defcommand eclipse () ()
  "Start eclipse or switch to it, if it is already running."
  (run-or-raise "eclipse" '(:class "Eclipse")))

(define-key *top-map* (kbd "s-e") "eclipse")

(defcommand vsplit-move-new-frame () ()
  "Does a vsplit and moves to the new frame"
  (run-commands "vsplit" "fnext"))

(defcommand hsplit-move-new-frame () ()
  "Does a vsplit and moves to the new frame"
  (run-commands "hsplit" "fnext"))

(defcommand new-terminal () ()
  "If the current frame is empty, creates a new termina,
   if not, move to the terminals group and create it there"
   (let* ((frame (slot-value (current-group) 'current-frame))
	 (current-group-frame-window (when frame (frame-window frame))))
     (if current-group-frame-window
	 (create-terminal nil nil)
	 (run-shell-command "gnome-terminal"))))

(defcommand windowlist-pull-wide () ()
  (let ((windows '())
	(fmt "%c %t"))
	   (dolist (gr (screen-groups (current-screen)))
	     (dolist (w (group-windows gr))
	       (push w windows)))
	   (if (null windows)
	       (message "No Managed Windows")
	       (let* ((group (current-group))
		      (window (select-window-from-menu (sort1 
							windows
							'<
							:key 'window-number)
						       fmt)))
		 (if window
		     (if (eq (window-group window) (current-group))
			 (pull-window window)
			 (move-window-to-group window group))
		     (throw 'error :abort))))))

(defcommand windowlist-go-wide () ()
  (let ((windows '())
	(fmt "%c %t"))
	   (dolist (gr (screen-groups (current-screen)))
	     (dolist (w (group-windows gr))
	       (push w windows)))
	   (if (null windows)
	       (message "No Managed Windows")
	       (let* ((group (current-group))
		      (window (select-window-from-menu (sort1 
							windows
							'<
							:key 'window-number)
						       fmt)))
		 (if window
		     (progn 
		       (switch-to-group (window-group window))
		       (group-focus-window (window-group window) window))
		     (throw 'error :abort))))))


(defcommand gmove-marked-here-wide () ()
  "move the marked windows to the specified group. Wide version"
    (dolist (g (sort-groups (current-screen)))
      (dolist (i (marked-windows g))
        (setf (window-marked i) nil)
	(if (eq (window-group i) (current-group))
	    (pull-window i)
	    (move-window-to-group i (current-group))))))



;; mixer
;; XXX `m' conflicts with `lastmsg'
(define-key *root-map* (kbd "m") "exec xterm -rv -e alsamixer")

(define-key *root-map* (kbd "M-l") "exec xset dpms force off")

;; take a screenshot of the screen (using PrtSc)
;; TODO Install `imagemagick' (for getting the `import' command)
;; (define-key *root-map* (kbd "Print")
;;   "exec import -window root png:$HOME/Desktop/screenshot_$(date +%F_%H-%M-%S).png")

;; push the window in the adjacent frame
(define-key *top-map* (kbd "s-K") "move-window up")
(define-key *top-map* (kbd "s-H") "move-window left")
(define-key *top-map* (kbd "s-J") "move-window down")
(define-key *top-map* (kbd "s-L") "move-window right")

(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-l") "move-focus right")

(define-key *top-map* (kbd "M-TAB") "windowlist-go-wide")

(define-key *top-map* (kbd "s-'") "windowlist-pull-wide")


(define-key *top-map* (kbd "s-SPC") "colon")

(define-key *top-map* (kbd "s-m") "mark")
(define-key *top-map* (kbd "s-n") "gmove-marked-here-wide")

(define-key *top-map* (kbd "s-2") "vsplit-move-new-frame")
(define-key *top-map* (kbd "s-3") "hsplit-move-new-frame")

(define-key *top-map* (kbd "s-0") "delete-window-and-frame")

(define-key *top-map* (kbd "s-1") "iresize")


(define-key *top-map* (kbd "C-M-p") "gnext")
(define-key *top-map* (kbd "C-M-o") "gprev")

(define-key *root-map* (kbd "Delete") "repack-window-numbers")

(define-key *root-map* (kbd "I") "show-window-properties")

(define-key *top-map* (kbd "s-.") "menu")
(define-key *top-map* (kbd "s-,") "terminals-menu")
;;(define-key *root-map* (kbd "s-s") "sync-menu")

